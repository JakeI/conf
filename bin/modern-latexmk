#!/usr/bin/env bash

# Define common latexmk arguments
LATEXMK_ARGS=(
    -lualatex
    -interaction=nonstopmode
    -outdir=build/.
    -auxdir=build/.
    -cd-
    -CF
    -e '$lualatex="pplatex -q -c lualatex -- %O %S"'
)

# Function to handle single-shot compilation
compile_single_shot() {
    local file_name="$1"
    shift
    local additional_args="$@"
    local job_name="${file_name%.tex}"

    latexmk "${LATEXMK_ARGS[@]}" $additional_args "$file_name"

    # Copy the resulting PDF file to the same directory as the .tex file
    cp "build/${job_name}.pdf" .

    # Delete the build files created during this process
    find build/ -type f -newer "$file_name" -exec rm {} \;
}

# Function to handle continuous compilation
compile_continuous() {
    local file_name="$1"
    shift
    local additional_args="$@"

    latexmk "${LATEXMK_ARGS[@]}" \
        -pvc \
        -e '$pdf_previewer='"'$0 show'" \
        -e '$pdf_update_method=2' \
        $additional_args \
        "$file_name"
}

# Function to delete the build directory if it is empty
cleanup_build_directory() {
    if [ -z "$(ls -A build)" ]; then
        rm -r build
    fi
}

# Function to check if the file name is valid
check_file_name() {
    local file_name="$1"

    if [[ -z "$file_name" || "$file_name" != *.tex ]]; then
        local tex_files=( *.tex )
        if [[ ${#tex_files[@]} -eq 1 ]]; then
            file_name="${tex_files[0]}"
        else
            echo "Error: No .tex file specified, and ${#tex_files[@]} .tex files found in the directory."
            echo "Please specify a .tex file or ensure there is only one in the directory."
            exit 1
        fi
    fi

    echo "$file_name"
}

# Main function to build the case
build_case() {
    local single_shot=false
    local additional_args=()
    local file_name="${@: -1}"

     # Check for --single-shot option and build additional_args array in one loop
    for ((i=1; i<$#; i++)); do
        if [[ "${!i}" == "--single-shot" ]]; then
            single_shot=true
        else
            additional_args+=("${!i}")
        fi
    done

    # Check if the file name is valid
    file_name=$(check_file_name "$file_name")

    local job_name="${file_name%.tex}"
    mkdir -p build

    if $single_shot; then
        compile_single_shot "$file_name" "${additional_args[@]}"
        cleanup_build_directory
    else
        compile_continuous "$file_name" "${additional_args[@]}"
    fi
}

# Find a single .tex file and check for its matching PDF
find_single_tex_with_pdf() {
    tex_files=(*.tex)
    if [ "${#tex_files[@]}" -eq 1 ]; then
        echo "${tex_files[0]}"
    else
        matching_tex=""
        for tex_file in "${tex_files[@]}"; do
            base_name=$(basename "$tex_file" .tex)
            build_pdf_path="build/${base_name}.pdf"
            if [ -f "$build_pdf_path" ]; then
                if [ -n "$matching_tex" ]; then
                    echo "Error: Multiple .tex files have matching PDFs in the build directory." >&2
                    exit 1
                fi
                matching_tex="$tex_file"
            fi
        done
        if [ -z "$matching_tex" ]; then
            echo "Error: No .tex files have matching PDFs in the build directory." >&2
            exit 1
        fi
        echo "$matching_tex"
    fi
}

show_pdf_in_zathura() {
    tmpdir=$(mktemp -d)
    cp "$XDG_CONFIG_HOME/zathura/zathurarc" "$tmpdir/."
    echo 'set filemonitor "signal"' >> "$tmpdir/zathurarc"
    zathura --fork --config-dir="$tmpdir" "$1"
}

perform_clean() {
    if [ -d build/. ]; then
        case "$1" in
        all)
            latexmk -C -outdir=build/. -auxdir=build/.
            ;;
        *)
            latexmk -c -outdir=build/. -auxdir=build/.
        esac
    fi
}

display_help() {
    echo "runs latex in the build/. directory"
    echo "$0 [build|show|clean|help] [additional arguments]"
    echo "  build/b   : Run latexmk in continuous mode"
    echo "              last arg should be the file_name.tex"
    echo "      --single-shot : Run latexmk in non-continuous mode,"
    echo "                      copy the resulting PDF, and delete build files"
    echo "  show/s    : display a pdf in a forked zathura instance"
    echo "  clean/c   : Perform clean operation."
    echo "  clean all : Clean everything including the pdf file"
    echo "  help/h    : Display this help message."
}

# Handle "show" functionality
handle_show() {
    if [ -z "$1" ]; then
        input_file=$(find_single_tex_with_pdf)
    else
        input_file="$1"
    fi

    if [[ "$input_file" == *.pdf && -f "$input_file" ]]; then
        pdf_name="$input_file"
    elif [[ "$input_file" == *.tex ]]; then
        base_name=$(basename "$input_file" .tex)
        build_pdf_path="build/${base_name}.pdf"

        if [ -f "$build_pdf_path" ]; then
            pdf_name="$build_pdf_path"
        else
            echo "Error: No PDF file found in the build directory for $input_file."
            exit 1
        fi
    else
        echo "Error: Input must be a valid .pdf or .tex file."
        exit 1
    fi
    show_pdf_in_zathura "$pdf_name"
}

# Main case statement
case "$1" in
    "clean" | "c" )
        shift
        perform_clean "$1"
        ;;
    "help" | "h")
        display_help
        shift
        ;;
    "show" | "s" )
        shift
        handle_show "$1"
        ;;
    "build" | "b" )
        shift
        build_case "$@"
        ;;
    *)
        build_case "$@"
        ;;
esac

