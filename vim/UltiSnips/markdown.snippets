global !p
PARENTH_MATCH = {
	"(": ")",
	")": "(",
	"[": "]",
	"]": "[",
	"{": "\\}",
	"}": "\\{",
	"|": "|",
	"∥": "∥",
	"⟨": "⟩",
	"⟩": "⟨",
	# "{": "}",
	"⌊": "⌋",
	"⌋": "⌊",
	"⌈": "⌉",
	"⌉": "⌈",
}
# FRACSCRIPTS = { k: v for (k, v) in zip("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", "0123456789𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷𝔄𝔅ℭ𝔇𝔈𝔉𝔊ℌℑ𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔ℜ𝔖𝔗𝔘𝔙𝔚𝔛𝔜ℨ") }
SUBSCRIPTS = { k: v for (k, v) in zip("0123456789aehijklmnoprstuvx", "₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓ") }
SUPSCRIPTS = { k: v for (k, v) in zip("0123456789abcdevghijklmnoprstuvwxyz", "⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᵛᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘᵛʷˣʸᶻ") }
PANDOC_LATEX_INLINE_MATH = vim.eval("hlID('pandocLaTeXInlineMath')")
PANDOC_LATEX_MATH_BLOCK = vim.eval("hlID('pandocLaTeXMathBlock')")
# def ismath():
# 	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
# 	try:
# 		# see https://github.com/lervag/vimtex/issues/1863 for example content
# 		first = next(i 
# 			for i in reversed(synstackids) if 
# 				i == PANDOC_LATEX_INLINE_MATH or 
# 				i == PANDOC_LATEX_MATH_BLOCK
# 		)
# 		return True
# 	except StopIteration:
# 		return False
endglobal

snippet letter "description"
---
  author: ${1:Jochen Illerhaus}
  phone: ${2:+49 157 83664910}
  email: ${3:j.illerhaus@live.de}
  date: `!v strftime("%d.%m.%y")`
  place: ${4:Karlsruhe}
  subject: ${5:Titel vom Brief -- Don't forget to change this!!}
  return-address:
    - ${6:Georg-Friedrich-Straße 6}
    - ${7:76131 Karlsruhe}
  address:
    - ${8:Musterfirma GmbH}
    - ${9:Max Mustermann}
    - ${10:Musterstraße}
    - ${11:12345 Musterstadt}
  opening: ${12:Sehr geehrte Damen und Herren,}
  closing: ${13:Mit freundlichen Grüßen}
  signature: /home/ji/conf/templates/signature-${14:blue}.pdf
  header-includes:
    - \usepackage{greek}
  encludes: ${15:Muster, Muster, Muster}
---

$16
endsnippet

snippet eisvogel "Eisvogel template frontmatter"
---
  author: ${1:Jochen K. Illerhaus}
  title: ${2:}
  date: `!v strftime("%y-%m-%d")`
---

$3
endsnippet

snippet cheat "Cheat Frontmatter template"
---
  author: Jochen K. Illerhaus
  email: j.illerhaus@live.de
  date: today
  title: false
  class:
    name: some strange class
    abbreviation: SSC
    professor: Prof. Dr. Musterman
    semester: SS23
    web: https://ilias.studium.kit.edu/
  lang: de-DE
  col-count: 3
  mobile: true
  numbered-sections: false
  head: false
  header-includes: false
---

$0
endsnippet


snippet code "codeblock"
<!-- name: src_$1, require: src_$2 -->
\`\`\`{.${3:julia} language=$3}
${0:${VISUAL}}
\`\`\`

<!-- target: $1, name: out_$1, require: src_$1 -->
\`\`\`{.$3 language=$3}
\`\`\`

<!-- name: $1 -->
\`\`\`{language=console}
\`\`\`
endsnippet

snippet graph "graphviz graph"
\`\`\`{.graphviz caption="${1:}"}
digraph `!p snip.rv = t[1].strip().lower().replace(" ", "_")` {
layout="dot"; rankdir=LR;
# layout="neato"; overlap=false;
    ${2:${VISUAL}}
}
\`\`\`
endsnippet

snippet ``` "evaluatabel code block"
<!-- target: ${1:code_name}, name: $1-src -->
\`\`\`${2:python}
$3
\`\`\`

<!-- name: $1 -->
\`\`\`
\`\`\`
endsnippet

snippet `$$ "evaluateable hidden code/math block"
<!-- target: ${1:code_name}
\`\`\`${2:python}
$3
\`\`\`
-->

<!-- name: $1 -->
$$
$$
endsnippet

snippet beg "begin and end block" i
\begin{$1}
	${2:${VISUAL}}
\end{$1}
endsnippet

snippet center "center environment"
\\begin{center}
${1:${VISUAL}}
\\end{center}
$0
endsnippet

snippet sidebyside "put two things side by side"
\begin{minipage}{\columnwidth}
\begin{multicols*}{2}
${1:${VISUAL}}
\end{multicols*}
\end{minipage}
endsnippet

snippet $ "inline quation" i
$$${1:${VISUAL}}$$ $0
endsnippet

snippet $$ "dollar equation environment"
$$$$
	${1:${VISUAL}}
$$$$
$0
endsnippet

snippet eq "equation environment"
\\begin{equation}
	${1:${VISUAL}}
\\end{equation}
$0
endsnippet

snippet eql "Labeled equation environment" A
\\begin{equation}
	\\label{eq:$2}
	${1:${VISUAL}}
\\end{equation}
endsnippet

snippet mat "matrix environment"
☆${1:(}⦗${2:${VISUAL}}⦘★`!p snip.rv = PARENTH_MATCH.get(t[1], t[1])`$0
endsnippet

snippet ⦗ "matrix without parenthesis" i
⦗${1:${VISUAL}}⦘$0
endsnippet

snippet "mat([\(\)\[\]⟨⟩∥|])" "matrix environment with deliminator" rA
☆`!p snip.rv = match.group(1)`⦗${1:${VISUAL}}⦘★`!p snip.rv = PARENTH_MATCH.get(match.group(1), match.group(1))`$0
endsnippet

snippet { "paired curly braces properly excaped" i
☆\\{${1:${VISUAL}}★\\}$0
endsnippet

snippet "([()\[\]⟨⟩∥|⌊⌋⌈⌉])" "paired parenthesis" r
☆`!p snip.rv = match.group(1)`${1:${VISUAL}}★`!p snip.rv = PARENTH_MATCH.get(match.group(1), match.group(1))`$0
endsnippet

snippet cases "cases environment" i
☆\\{⦗
	$1, & ~~ & $2 \\\\
	${3:${VISUAL}} && Ŧ{sonst}
⦘★.
$0
endsnippet

snippet tikzgraph "environment for drawing 2D graphs"
\begin{center}\begin{tikzpicture}
    \begin{axis}[width=0.9\linewidth,
        xmin=-4.5, xmax=3,
        ymin=-4, ymax=10,
        domain=-8:8,
        samples=100,
        axis x line = center,
        axis y line = center,
        xlabel = {$x$},
        ylabel = {$y$},
        ]
        % \addplot[myblue, thick] {x*x + 3*x +1 };
        ${1:${VISUAL}}
    \end{axis}
\end{tikzpicture}\end{center}
endsnippet

snippet tikzpie "pie chart using tikz"
\begin{center}
\begin{tikzpicture}
\pie{${1:
    50.0/Some,
    50.0/Thing,
}}
\end{tikzpicture}
\end{center}
endsnippet

snippet / "fraction" i
{${1:${VISUAL}}÷$2}$0
endsnippet

snippet '([^\$\+\-\*×÷/ ]*)/([^\$\+\-\*×÷/ ]+)' "Enter Fraction" ir
`!p snip.rv = "{" + match.group(1) + "÷" + match.group(2) + "}"`
endsnippet

snippet "([^dn])d" "total derivative" ir
`!p snip.rv = match.group(1)`{𝒹$1÷𝒹$2}$0
endsnippet

snippet dd "second total derivative" i
{𝒹²$1÷𝒹$2²}$0
endsnippet

snippet nd "nth total derivative" i
{𝒹^{$1}$2÷𝒹$3^{$1}}$0
endsnippet

snippet "([^pn∂t])(p|∂)" "partial derivative" ir
`!p snip.rv = match.group(1)`{∂$1÷∂$2}$0
endsnippet

snippet "(p|∂)(p|∂)" "second partial derivative" ir
{∂²$1÷∂$2²}$0
endsnippet

snippet "n(p|∂)" "nth partial derivative" ir
{∂^{$1}$2÷∂$3^{$1}}$0
endsnippet

snippet lim "limit" i
\\lim_{$1} $0
endsnippet

snippet sum "sum" i
\\sum_{$1=$2}^$3 $0
endsnippet

snippet sumz "sum all numbers Z" i
\\sum_{$1=-∞}^∞ $0
endsnippet

snippet sumn "sum all numbers N" i
\\sum_{$1=1}^∞ $0
endsnippet

snippet sum0 "sum all numbers N and 0" i
\\sum_{$1=0}^∞ $0
endsnippet

snippet inv "inverse of something" i
^{-1}
endsnippet

snippet tp "Transposition" i
^⊤
endsnippet

snippet ^{ "power of something" iA
^{$1}$0
endsnippet

snippet _{ "subscript something" iA
_{$1}$0
endsnippet

snippet vl "Vorlesung and slide number indecator"
*[VL_$1-$2]* $0
endsnippet

snippet de "Set LTeX language to German"
<!-- LTeX: language=de-DE -->
endsnippet

snippet en "Set LTeX language to US-English"
<!-- LTeX: language=en-US -->
endsnippet

snippet "_([0123456789aehijklmnoprstuvx])" "subscript" ir
`!p snip.rv = SUBSCRIPTS.get(match.group(1), "_" + match.group(1))`
endsnippet

snippet "\^([0123456789abcdevghijklmnoprstuvwxyz])" "supscript" ir
`!p snip.rv = SUPSCRIPTS.get(match.group(1), "^" + match.group(1))`
endsnippet

snippet "([a-zα-ω])([0-9])" "Letter followed by number means subscript" ri
`!p snip.rv = match.group(1) + SUBSCRIPTS.get(match.group(2), "_" + match.group(2))`
endsnippet

snippet >_ "Greater then or equal" Ai
≥
endsnippet

snippet <_ "Less then or equal" Ai
≤
endsnippet

snippet array "array environment" i
\begin{array}{rl}
	${1:${VISUAL}}
\end{array}
endsnippet

snippet "([∫∬∭⨌∮∯∰])" "append limits to integral" ri
`!p snip.rv = match.group(1) + "⮃"`
endsnippet

snippet intr "integrate real numbers" i
∫⮃_{-∞}^∞ 
endsnippet

snippet intl "integrate positive real numbers" i
∫⮃₀^∞
endsnippet

snippet exp "exponential funtkone" i
ℯ^{$1}$0
endsnippet

snippet sqrt "square root" i
√{$1}$0
endsnippet

snippet "(eff|min|max)" "text subscripts" ir
Ŧ{`!p snip.rv = match.group(1)`}
endsnippet

snippet text "insert text" i
Ŧ{$1}$0
endsnippet

snippet day "insert day block"
day $1 day$0
endsnippet

priority 1000
snippet "day(.*)day" "evauluted day based on description" ri
\``!p 
# TODO: use arrow.utcnow().dehumanize(info) instead
info = match.group(1).lower()
equivalent = dict(so="sunday", mo="monday", di="tuesday", mi="wednesday", do="thursday", fr="friday", sa="saturday")
equivalent['+'] = "next "
equivalent['-'] = "last "
for k, v in equivalent.items():
	info = info.replace(k, v)
cmd = ['date', '-d', info, '+%y-%m-%d']
import subprocess
snip.rv = subprocess.check_output(cmd).decode("utf-8").rstrip()
`\`
endsnippet
priority 1
