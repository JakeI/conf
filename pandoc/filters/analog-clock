#!/usr/bin/env python3

import re
from pandocfilters import toJSONFilter, RawInline

clock_regex = re.compile(r"^(\d\d?):(\d\d)(|\.|\;|\?|\!|\,)$")

def round_to_five(x: int) -> int:
    return (x//5 + int(x % 5 > 2))*5

def in_range(x: int, lower: int, upper: int) -> int:
    return lower <= x and x < upper

def to_twelf_hour(hour: int) -> int:
    hour %= 12
    return hour if hour != 0 else 12

def round_to_emoji(hour: int, minute: int) -> str:
    hour = to_twelf_hour(hour)
    if minute <= 15:
        return str(hour)
    elif minute > 45:
        return str(to_twelf_hour(hour + 1))
    return str(hour) + "30"

def use_analoge_clock(key, value, format, meta):
    if format != 'latex':
        return
    if key == "Str":
        m = clock_regex.search(value)
        if m is not None and in_range(int(m.group(1)), 0, 25) and in_range(int(m.group(2)), 0, 60):
            hr, mi = int(m.group(1)), int(m.group(2))
            return RawInline("tex", "".join([
                "\\clockFmt",
                "{", f"{hr:02d}", "}",
                "{", f"{mi:02d}", "}",
                "{", f"{hr%12 if hr != 0 else 12:02d}", "}",  # 12 hour clock
                "{", f"{round_to_five(mi):02d}", "}",
                "{", f"clock{round_to_emoji(hr, mi)}", "}",
                m.group(3)]))

if __name__ == "__main__":
    toJSONFilter(use_analoge_clock)
